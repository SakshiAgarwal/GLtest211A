#version 330

uniform mat4 viewMatrix, projMatrix;
uniform mat3 normalMatrix;

uniform vec3 LightColor;
uniform vec3 LightPosition;
uniform float Shininess;
uniform float Strength;
uniform vec3 EyeDirection;

layout (location = 0)
in vec4 position;
in vec3 normal;
in vec3 color;

layout(location = 1)
in vec2 vertexUV;

out vec3 Color;
out vec3 Normal;
out vec4 Position;

// UV is the texture coordinate of this vertex
out vec2 UV;

void main()
{
    Color = color;
    Normal = normalize(normalMatrix * normal);
    UV = vertexUV;

    vec3 pos = position.xyz;
    vec3 L = normalize(LightPosition - pos);
    vec3 R = normalize(reflect(-L, Normal));
    //vec3 V = normalize(EyeDirection - pos);
    vec3 V = normalize(vec3(inverse(viewMatrix) * vec4(0, 0, 0, 1)) + pos);
    vec3 H = normalize(L + V);

    float material_ambient = 0.1;
    vec3 ambientColor = LightColor * material_ambient;

    float material_diffuse = 0.9;
    vec3 diffuse = color * material_diffuse;
    float dfFactor = max(dot(L, Normal), 0.0);
    vec3 diffuseColor = dfFactor * diffuse;

    float material_specular = 0.95;
    vec3 specularColor = vec3(0.0, 0.0, 0.0);
    if (dot(Normal, L) >= 0.0) {
        specularColor = LightColor * pow(max(0.0, dot(Normal, H)), Shininess);
    }

    Color = ambientColor + diffuseColor + specularColor;
    gl_Position = projMatrix * viewMatrix * position;
}